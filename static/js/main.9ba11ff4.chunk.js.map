{"version":3,"sources":["images/soflogo.png","images/pslogo.png","components/AffichageChrono/AffichageChrono.js","components/ButtonChrono/ButtonChrono.js","components/Chrono/Chrono.js","components/Play/Play.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AffichageChrono","props","style","fontFamily","fontSize","fontWeight","color","marginTop","marginBottom","hr","min","sec","ButtonChrono","start","display","flexDirection","alignItems","justifyContent","className","onClick","startChrono","restart","pauseChrono","Chrono","useState","setStart","cost","setCost","setHr","setMin","setSec","affichage","hour","setHour","minute","setMinute","seconde","setSeconde","useEffect","setTimeout","run","Math","floor","time","toFixed","calculCost","Play","marginLeft","marginRight","src","pslogo","height","width","filter","alt","number","App","logo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9ba11ff4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/soflogo.041513fd.png\";","module.exports = __webpack_public_path__ + \"static/media/pslogo.4932085e.png\";","import React from 'react'\r\nimport './AffichageChrono.css'\r\n\r\nconst AffichageChrono = props => {\r\n  return (\r\n    <p\r\n      style={{\r\n        fontFamily: 'Cooper',\r\n        fontSize: '40px',\r\n        fontWeight: 'bold',\r\n        color: 'white',\r\n        marginTop: '-20px',\r\n        marginBottom: '5px'\r\n      }}\r\n    >\r\n      {props.hr}:{props.min}:{props.sec}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default AffichageChrono\r\n","import React from 'react'\r\nimport './ButtonChrono.css'\r\n\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow'\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft'\r\nimport PauseIcon from '@material-ui/icons/Pause'\r\n\r\nconst ButtonChrono = props => {\r\n  if (props.start === 0) {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'row',\r\n          alignItems: 'center',\r\n          justifyContent: 'center'\r\n        }}\r\n      >\r\n        <div className='bn' onClick={props.startChrono}>\r\n          <PlayArrowIcon />\r\n        </div>\r\n\r\n        <div className='bn' onClick={props.restart}>\r\n          <RotateLeftIcon />\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'row',\r\n          alignItems: 'center',\r\n          justifyContent: 'center'\r\n        }}\r\n      >\r\n        <div className='bn' onClick={props.pauseChrono}>\r\n          <PauseIcon />\r\n        </div>\r\n\r\n        <div className='bn' onClick={props.restart}>\r\n          <RotateLeftIcon />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default ButtonChrono\r\n","import React, { useState, useEffect } from 'react'\r\nimport './Chrono.css'\r\n\r\nimport AffichageChrono from '../AffichageChrono/AffichageChrono'\r\nimport ButtonChrono from '../ButtonChrono/ButtonChrono'\r\n\r\nlet interval\r\n\r\nconst Chrono = () => {\r\n  const prixH = 20\r\n\r\n  const calculCost = (sec, min, hr) => {\r\n    return (hr * prixH + (min * prixH) / 60).toFixed(2)\r\n  }\r\n\r\n  const [start, setStart] = useState(0)\r\n\r\n  const [cost, setCost] = useState('--')\r\n\r\n  const [hr, setHr] = useState('00')\r\n  const [min, setMin] = useState('00')\r\n  const [sec, setSec] = useState('00')\r\n\r\n  const affichage = (sec, min, hr) => {\r\n    if (sec < 10) {\r\n      setSec('0' + sec)\r\n    } else {\r\n      setSec(sec)\r\n    }\r\n    if (min < 10) {\r\n      setMin('0' + min)\r\n    } else {\r\n      setMin(min)\r\n    }\r\n    if (hr < 10) {\r\n      setHr('0' + hr)\r\n    } else {\r\n      setHr(hr)\r\n    }\r\n  }\r\n\r\n  const [hour, setHour] = useState(0)\r\n  const [minute, setMinute] = useState(0)\r\n  const [seconde, setSeconde] = useState(0)\r\n\r\n  useEffect(() => {\r\n    if (start) {\r\n      interval = setTimeout(() => {\r\n        run(0.5)\r\n      }, 500)\r\n\r\n      affichage(Math.floor(seconde), minute, hour)\r\n    }\r\n  }, [start, seconde])\r\n\r\n  const pauseChrono = () => {\r\n    setStart(0)\r\n    setCost(calculCost(seconde, minute, hour))\r\n  }\r\n  const startChrono = () => {\r\n    setStart(1)\r\n    setCost(0)\r\n  }\r\n\r\n  const restart = () => {\r\n    setStart(0)\r\n    affichage(0, 0, 0)\r\n    setCost(0)\r\n    setHour(0)\r\n    setMinute(0)\r\n    setSeconde(0)\r\n  }\r\n  const run = time => {\r\n    if (seconde > 59) {\r\n      setSeconde(0)\r\n      setMinute(minute + 1)\r\n    } else {\r\n      setSeconde(seconde + time)\r\n    }\r\n    if (minute > 59) {\r\n      setMinute(0)\r\n      setHour(hour + 1)\r\n    }\r\n    if (hour > 23) {\r\n      setHour(0)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n      }}\r\n    >\r\n      <AffichageChrono hr={hr} min={min} sec={sec} />\r\n      <ButtonChrono\r\n        start={start}\r\n        pauseChrono={pauseChrono}\r\n        startChrono={startChrono}\r\n        restart={restart}\r\n      />\r\n\r\n      <p\r\n        style={{\r\n          fontFamily: 'Cooper',\r\n          fontSize: '30px',\r\n          fontWeight: 'bold',\r\n          color: 'white',\r\n          marginTop: '0px',\r\n          marginBottom: '5px'\r\n        }}\r\n      >\r\n        {cost} DH\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chrono\r\n","import React from 'react'\r\nimport pslogo from '../../images/pslogo.png'\r\nimport './Play.css'\r\nimport Chrono from '../Chrono/Chrono'\r\nconst Play = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        marginLeft: '30px',\r\n        marginRight: '30px'\r\n      }}\r\n    >\r\n      <img\r\n        src={pslogo}\r\n        style={{\r\n          height: '277',\r\n          width: '215px',\r\n          filter: 'drop-shadow(0px 3px 6px rgba(176, 30, 30, 0.588))'\r\n        }}\r\n        alt='Sunset On Fire'\r\n      />\r\n\r\n      <p\r\n        style={{\r\n          filter: 'drop-shadow(-1px 0px 1px #F3AB5F)',\r\n          fontFamily: 'Harlow Solid',\r\n          fontSize: '50px',\r\n          fontWeight: 'bold',\r\n          color: '#1a1a1a',\r\n          marginTop: '0px'\r\n        }}\r\n      >\r\n        play {props.number}\r\n      </p>\r\n      <Chrono />\r\n    </div>\r\n  )\r\n}\r\nexport default Play\r\n","import React from 'react'\nimport logo from './images/soflogo.png'\nimport './App.css'\nimport Play from './components/Play/Play'\n\nfunction App () {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      }}\n    >\n      <img\n        src={logo}\n        style={{\n          height: '300px',\n          width: '300px'\n        }}\n        alt='Sunset On Fire'\n      />\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center'\n        }}\n      >\n        <Play number={1} />\n        <Play number={2} />\n        <Play number={3} />\n        <Play number={4} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}